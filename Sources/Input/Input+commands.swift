import Foundation
import ChromeDevtoolProtocol

// Generated code, ChromeDevtoolsProtocol commands in domain "Input"

extension SwiftCDPDomains.Input {
  /// - description: Dispatches a key event to the page.
  public struct dispatchKeyEvent: ModelMethod {
    public typealias Model = SwiftCDPDomains.Input
    public static let name = "dispatchKeyEvent"
    
    /// - description: Type of the key event.
    public var type: String
    
    /// - description: Bit field representing pressed modifier keys. Alt=1, Ctrl=2, Meta/Command=4, Shift=8
    /// (default: 0).
    public var modifiers: Int?
    
    /// - description: Time at which the event occurred.
    public var timestamp: TimeSinceEpoch?
    
    /// - description: Text as generated by processing a virtual key code with a keyboard layout. Not needed for
    /// for `keyUp` and `rawKeyDown` events (default: "")
    public var text: String?
    
    /// - description: Text that would have been generated by the keyboard if no modifiers were pressed (except for
    /// shift). Useful for shortcut (accelerator) key handling (default: "").
    public var unmodifiedText: String?
    
    /// - description: Unique key identifier (e.g., 'U+0041') (default: "").
    public var keyIdentifier: String?
    
    /// - description: Unique DOM defined string value for each physical key (e.g., 'KeyA') (default: "").
    public var code: String?
    
    /// - description: Unique DOM defined string value describing the meaning of the key in the context of active
    /// modifiers, keyboard layout, etc (e.g., 'AltGr') (default: "").
    public var key: String?
    
    /// - description: Windows virtual key code (default: 0).
    public var windowsVirtualKeyCode: Int?
    
    /// - description: Native virtual key code (default: 0).
    public var nativeVirtualKeyCode: Int?
    
    /// - description: Whether the event was generated from auto repeat (default: false).
    public var autoRepeat: Bool?
    
    /// - description: Whether the event was generated from the keypad (default: false).
    public var isKeypad: Bool?
    
    /// - description: Whether the event was a system key event (default: false).
    public var isSystemKey: Bool?
    
    /// - description: Whether the event was from the left or right side of the keyboard. 1=Left, 2=Right (default:
    /// 0).
    public var location: Int?
    
    /// - description: Editing commands to send with the key event (e.g., 'selectAll') (default: []).
    /// These are related to but not equal the command names used in `document.execCommand` and NSStandardKeyBindingResponding.
    /// See https://source.chromium.org/chromium/chromium/src/+/master:third_party/blink/renderer/core/editing/commands/editor_command_names.h for valid command names.
    /// - intention: This is an experimental property.
    public var commands: [String]?
    
    public init(type: String, modifiers: Int? = nil, timestamp: TimeSinceEpoch? = nil, text: String? = nil, unmodifiedText: String? = nil, keyIdentifier: String? = nil, code: String? = nil, key: String? = nil, windowsVirtualKeyCode: Int? = nil, nativeVirtualKeyCode: Int? = nil, autoRepeat: Bool? = nil, isKeypad: Bool? = nil, isSystemKey: Bool? = nil, location: Int? = nil, commands: [String]? = nil) {
      self.type = type
      self.modifiers = modifiers
      self.timestamp = timestamp
      self.text = text
      self.unmodifiedText = unmodifiedText
      self.keyIdentifier = keyIdentifier
      self.code = code
      self.key = key
      self.windowsVirtualKeyCode = windowsVirtualKeyCode
      self.nativeVirtualKeyCode = nativeVirtualKeyCode
      self.autoRepeat = autoRepeat
      self.isKeypad = isKeypad
      self.isSystemKey = isSystemKey
      self.location = location
      self.commands = commands
    }
    
    public struct Result: Decodable {
      
    }
    public static func transform(client: ChromeClient, result: Result) -> Void {
    }
  }
}

extension SwiftCDPDomains.Input {
  /// - description: This method emulates inserting text that doesn't come from a key press,
  /// for example an emoji keyboard or an IME.
  /// - intention: This is an experimental property.
  public struct insertText: ModelMethod, ExperimentalFeature {
    public typealias Model = SwiftCDPDomains.Input
    public static let name = "insertText"
    
    /// - description: The text to insert.
    public var text: String
    
    public init(text: String) {
      self.text = text
    }
    
    public struct Result: Decodable {
      
    }
    public static func transform(client: ChromeClient, result: Result) -> Void {
    }
  }
}

extension SwiftCDPDomains.Input {
  /// - description: Dispatches a mouse event to the page.
  public struct dispatchMouseEvent: ModelMethod {
    public typealias Model = SwiftCDPDomains.Input
    public static let name = "dispatchMouseEvent"
    
    /// - description: Type of the mouse event.
    public var type: String
    
    /// - description: X coordinate of the event relative to the main frame's viewport in CSS pixels.
    public var x: JsonNumber
    
    /// - description: Y coordinate of the event relative to the main frame's viewport in CSS pixels. 0 refers to
    /// the top of the viewport and Y increases as it proceeds towards the bottom of the viewport.
    public var y: JsonNumber
    
    /// - description: Bit field representing pressed modifier keys. Alt=1, Ctrl=2, Meta/Command=4, Shift=8
    /// (default: 0).
    public var modifiers: Int?
    
    /// - description: Time at which the event occurred.
    public var timestamp: TimeSinceEpoch?
    
    /// - description: Mouse button (default: "none").
    public var button: MouseButton?
    
    /// - description: A number indicating which buttons are pressed on the mouse when a mouse event is triggered.
    /// Left=1, Right=2, Middle=4, Back=8, Forward=16, None=0.
    public var buttons: Int?
    
    /// - description: Number of times the mouse button was clicked (default: 0).
    public var clickCount: Int?
    
    /// - description: The normalized pressure, which has a range of [0,1] (default: 0).
    /// - intention: This is an experimental property.
    public var force: JsonNumber?
    
    /// - description: The normalized tangential pressure, which has a range of [-1,1] (default: 0).
    /// - intention: This is an experimental property.
    public var tangentialPressure: JsonNumber?
    
    /// - description: The plane angle between the Y-Z plane and the plane containing both the stylus axis and the Y axis, in degrees of the range [-90,90], a positive tiltX is to the right (default: 0).
    /// - intention: This is an experimental property.
    public var tiltX: Int?
    
    /// - description: The plane angle between the X-Z plane and the plane containing both the stylus axis and the X axis, in degrees of the range [-90,90], a positive tiltY is towards the user (default: 0).
    /// - intention: This is an experimental property.
    public var tiltY: Int?
    
    /// - description: The clockwise rotation of a pen stylus around its own major axis, in degrees in the range [0,359] (default: 0).
    /// - intention: This is an experimental property.
    public var twist: Int?
    
    /// - description: X delta in CSS pixels for mouse wheel event (default: 0).
    public var deltaX: JsonNumber?
    
    /// - description: Y delta in CSS pixels for mouse wheel event (default: 0).
    public var deltaY: JsonNumber?
    
    /// - description: Pointer type (default: "mouse").
    public var pointerType: String?
    
    public init(type: String, x: JsonNumber, y: JsonNumber, modifiers: Int? = nil, timestamp: TimeSinceEpoch? = nil, button: MouseButton? = nil, buttons: Int? = nil, clickCount: Int? = nil, force: JsonNumber? = nil, tangentialPressure: JsonNumber? = nil, tiltX: Int? = nil, tiltY: Int? = nil, twist: Int? = nil, deltaX: JsonNumber? = nil, deltaY: JsonNumber? = nil, pointerType: String? = nil) {
      self.type = type
      self.x = x
      self.y = y
      self.modifiers = modifiers
      self.timestamp = timestamp
      self.button = button
      self.buttons = buttons
      self.clickCount = clickCount
      self.force = force
      self.tangentialPressure = tangentialPressure
      self.tiltX = tiltX
      self.tiltY = tiltY
      self.twist = twist
      self.deltaX = deltaX
      self.deltaY = deltaY
      self.pointerType = pointerType
    }
    
    public struct Result: Decodable {
      
    }
    public static func transform(client: ChromeClient, result: Result) -> Void {
    }
  }
}

extension SwiftCDPDomains.Input {
  /// - description: Dispatches a touch event to the page.
  public struct dispatchTouchEvent: ModelMethod {
    public typealias Model = SwiftCDPDomains.Input
    public static let name = "dispatchTouchEvent"
    
    /// - description: Type of the touch event. TouchEnd and TouchCancel must not contain any touch points, while
    /// TouchStart and TouchMove must contains at least one.
    public var type: String
    
    /// - description: Active touch points on the touch device. One event per any changed point (compared to
    /// previous touch event in a sequence) is generated, emulating pressing/moving/releasing points
    /// one by one.
    public var touchPoints: [TouchPoint]
    
    /// - description: Bit field representing pressed modifier keys. Alt=1, Ctrl=2, Meta/Command=4, Shift=8
    /// (default: 0).
    public var modifiers: Int?
    
    /// - description: Time at which the event occurred.
    public var timestamp: TimeSinceEpoch?
    
    public init(type: String, touchPoints: [TouchPoint], modifiers: Int? = nil, timestamp: TimeSinceEpoch? = nil) {
      self.type = type
      self.touchPoints = touchPoints
      self.modifiers = modifiers
      self.timestamp = timestamp
    }
    
    public struct Result: Decodable {
      
    }
    public static func transform(client: ChromeClient, result: Result) -> Void {
    }
  }
}

extension SwiftCDPDomains.Input {
  /// - description: Emulates touch event from the mouse event parameters.
  /// - intention: This is an experimental property.
  public struct emulateTouchFromMouseEvent: ModelMethod, ExperimentalFeature {
    public typealias Model = SwiftCDPDomains.Input
    public static let name = "emulateTouchFromMouseEvent"
    
    /// - description: Type of the mouse event.
    public var type: String
    
    /// - description: X coordinate of the mouse pointer in DIP.
    public var x: Int
    
    /// - description: Y coordinate of the mouse pointer in DIP.
    public var y: Int
    
    /// - description: Mouse button. Only "none", "left", "right" are supported.
    public var button: MouseButton
    
    /// - description: Time at which the event occurred (default: current time).
    public var timestamp: TimeSinceEpoch?
    
    /// - description: X delta in DIP for mouse wheel event (default: 0).
    public var deltaX: JsonNumber?
    
    /// - description: Y delta in DIP for mouse wheel event (default: 0).
    public var deltaY: JsonNumber?
    
    /// - description: Bit field representing pressed modifier keys. Alt=1, Ctrl=2, Meta/Command=4, Shift=8
    /// (default: 0).
    public var modifiers: Int?
    
    /// - description: Number of times the mouse button was clicked (default: 0).
    public var clickCount: Int?
    
    public init(type: String, x: Int, y: Int, button: MouseButton, timestamp: TimeSinceEpoch? = nil, deltaX: JsonNumber? = nil, deltaY: JsonNumber? = nil, modifiers: Int? = nil, clickCount: Int? = nil) {
      self.type = type
      self.x = x
      self.y = y
      self.button = button
      self.timestamp = timestamp
      self.deltaX = deltaX
      self.deltaY = deltaY
      self.modifiers = modifiers
      self.clickCount = clickCount
    }
    
    public struct Result: Decodable {
      
    }
    public static func transform(client: ChromeClient, result: Result) -> Void {
    }
  }
}

extension SwiftCDPDomains.Input {
  /// - description: Ignores input events (useful while auditing page).
  public struct setIgnoreInputEvents: ModelMethod {
    public typealias Model = SwiftCDPDomains.Input
    public static let name = "setIgnoreInputEvents"
    
    /// - description: Ignores input events processing when set to true.
    public var ignore: Bool
    
    public init(ignore: Bool) {
      self.ignore = ignore
    }
    
    public struct Result: Decodable {
      
    }
    public static func transform(client: ChromeClient, result: Result) -> Void {
    }
  }
}

extension SwiftCDPDomains.Input {
  /// - description: Synthesizes a pinch gesture over a time period by issuing appropriate touch events.
  /// - intention: This is an experimental property.
  public struct synthesizePinchGesture: ModelMethod, ExperimentalFeature {
    public typealias Model = SwiftCDPDomains.Input
    public static let name = "synthesizePinchGesture"
    
    /// - description: X coordinate of the start of the gesture in CSS pixels.
    public var x: JsonNumber
    
    /// - description: Y coordinate of the start of the gesture in CSS pixels.
    public var y: JsonNumber
    
    /// - description: Relative scale factor after zooming (>1.0 zooms in, <1.0 zooms out).
    public var scaleFactor: JsonNumber
    
    /// - description: Relative pointer speed in pixels per second (default: 800).
    public var relativeSpeed: Int?
    
    /// - description: Which type of input events to be generated (default: 'default', which queries the platform
    /// for the preferred input type).
    public var gestureSourceType: GestureSourceType?
    
    public init(x: JsonNumber, y: JsonNumber, scaleFactor: JsonNumber, relativeSpeed: Int? = nil, gestureSourceType: GestureSourceType? = nil) {
      self.x = x
      self.y = y
      self.scaleFactor = scaleFactor
      self.relativeSpeed = relativeSpeed
      self.gestureSourceType = gestureSourceType
    }
    
    public struct Result: Decodable {
      
    }
    public static func transform(client: ChromeClient, result: Result) -> Void {
    }
  }
}

extension SwiftCDPDomains.Input {
  /// - description: Synthesizes a scroll gesture over a time period by issuing appropriate touch events.
  /// - intention: This is an experimental property.
  public struct synthesizeScrollGesture: ModelMethod, ExperimentalFeature {
    public typealias Model = SwiftCDPDomains.Input
    public static let name = "synthesizeScrollGesture"
    
    /// - description: X coordinate of the start of the gesture in CSS pixels.
    public var x: JsonNumber
    
    /// - description: Y coordinate of the start of the gesture in CSS pixels.
    public var y: JsonNumber
    
    /// - description: The distance to scroll along the X axis (positive to scroll left).
    public var xDistance: JsonNumber?
    
    /// - description: The distance to scroll along the Y axis (positive to scroll up).
    public var yDistance: JsonNumber?
    
    /// - description: The number of additional pixels to scroll back along the X axis, in addition to the given
    /// distance.
    public var xOverscroll: JsonNumber?
    
    /// - description: The number of additional pixels to scroll back along the Y axis, in addition to the given
    /// distance.
    public var yOverscroll: JsonNumber?
    
    /// - description: Prevent fling (default: true).
    public var preventFling: Bool?
    
    /// - description: Swipe speed in pixels per second (default: 800).
    public var speed: Int?
    
    /// - description: Which type of input events to be generated (default: 'default', which queries the platform
    /// for the preferred input type).
    public var gestureSourceType: GestureSourceType?
    
    /// - description: The number of times to repeat the gesture (default: 0).
    public var repeatCount: Int?
    
    /// - description: The number of milliseconds delay between each repeat. (default: 250).
    public var repeatDelayMs: Int?
    
    /// - description: The name of the interaction markers to generate, if not empty (default: "").
    public var interactionMarkerName: String?
    
    public init(x: JsonNumber, y: JsonNumber, xDistance: JsonNumber? = nil, yDistance: JsonNumber? = nil, xOverscroll: JsonNumber? = nil, yOverscroll: JsonNumber? = nil, preventFling: Bool? = nil, speed: Int? = nil, gestureSourceType: GestureSourceType? = nil, repeatCount: Int? = nil, repeatDelayMs: Int? = nil, interactionMarkerName: String? = nil) {
      self.x = x
      self.y = y
      self.xDistance = xDistance
      self.yDistance = yDistance
      self.xOverscroll = xOverscroll
      self.yOverscroll = yOverscroll
      self.preventFling = preventFling
      self.speed = speed
      self.gestureSourceType = gestureSourceType
      self.repeatCount = repeatCount
      self.repeatDelayMs = repeatDelayMs
      self.interactionMarkerName = interactionMarkerName
    }
    
    public struct Result: Decodable {
      
    }
    public static func transform(client: ChromeClient, result: Result) -> Void {
    }
  }
}

extension SwiftCDPDomains.Input {
  /// - description: Synthesizes a tap gesture over a time period by issuing appropriate touch events.
  /// - intention: This is an experimental property.
  public struct synthesizeTapGesture: ModelMethod, ExperimentalFeature {
    public typealias Model = SwiftCDPDomains.Input
    public static let name = "synthesizeTapGesture"
    
    /// - description: X coordinate of the start of the gesture in CSS pixels.
    public var x: JsonNumber
    
    /// - description: Y coordinate of the start of the gesture in CSS pixels.
    public var y: JsonNumber
    
    /// - description: Duration between touchdown and touchup events in ms (default: 50).
    public var duration: Int?
    
    /// - description: Number of times to perform the tap (e.g. 2 for double tap, default: 1).
    public var tapCount: Int?
    
    /// - description: Which type of input events to be generated (default: 'default', which queries the platform
    /// for the preferred input type).
    public var gestureSourceType: GestureSourceType?
    
    public init(x: JsonNumber, y: JsonNumber, duration: Int? = nil, tapCount: Int? = nil, gestureSourceType: GestureSourceType? = nil) {
      self.x = x
      self.y = y
      self.duration = duration
      self.tapCount = tapCount
      self.gestureSourceType = gestureSourceType
    }
    
    public struct Result: Decodable {
      
    }
    public static func transform(client: ChromeClient, result: Result) -> Void {
    }
  }
}

